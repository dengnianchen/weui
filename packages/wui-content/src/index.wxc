<template xmlns:wx="http://www.w3.org/1999/xhtml">
	<view wx:if="{{loading||error}}" class="{{_style.stretch?'__stretch':''}}">
		<wui-cc wx:if="{{loading}}"
		        image="loading"
		        text="加载中"
		        size="120"
		        color="#999999"
		></wui-cc>
		<wui-abnor wx:elif="{{error}}"
		           error="{{error}}"
		           showButton="{{showRetryButton}}"
		           bindabnortap="_reload"
		></wui-abnor>
	</view>
	<view wx:else class="{{_style.stretch?'__stretch':''}}">
		<slot></slot>
	</view>
</template>

<script>
	
	let defaultStyle = {
		stretch: false
	};
	
	// 初始化：注入模块$.Wui.content
	if (!$.Wui.content) {
		
		/**
		 * 根据指定ID获取Content组件
		 * @param {String} id
		 * @return {null|{load(): void, bindLoad(*): void}}
		 */
		$.Wui.content = function(id) {
			let instance = this.content.instances[id];
			if (!instance)
				return null;
			return {
				bindLoad(func) {
					instance.loadCallback = func;
				},
				load() {
					instance.load();
				}
			};
		};
		
		/**
		 * 全局Content组件记录
		 * @type {Object}
		 */
		$.Wui.content.instances = {};
	}
	
	export default {
		config: {
			usingComponents: {
				'wui-abnor': '@yapple/wui-abnor',
				'wui-cc': '@yapple/wui-cc',
			},
		},
		behaviors: [],
		properties: {
			showRetryButton: {
				type: Boolean,
				value: true
			},
			wuiStyle: {
				type: String,
				value: "",
				observer(val) {
					try {
						val = val.replace(/([A-Za-z0-9\-]+):/g, function ($0, $1) {
							return "\"" + $.String.lowerDashToCamel($1) + "\":";
						});
						let wuiStyleObject = JSON.parse("{" + val + "}");
						this.setData({
							_style: $.extend(defaultStyle, wuiStyleObject)
						});
					} catch (ex) {
						console.log(ex);
					}
				}
			}
		},
		data: {
			loading: false,
			error: null,
			_style: defaultStyle
		},
		lifetimes: {
			attached() {
				if (this.id)
					$.Wui.content.instances[this.id] = this;
			},
			detached() {
				if (this.id)
					delete $.Wui.content.instances[this.id];
			}
		},
		methods: {
			async load() {
				this.setData({ loading: true });
				try {
					if (this.loadCallback)
						await this.loadCallback (this);
					this.setData({
						loading: false,
						error: null
					});
				} catch (ex) {
					console.error(ex);
					this.setData({
						loading: false,
						error: ex,
					});
				}
			},
			_reload() {
				this.load();
			}
		},
	};
</script>

<style lang="less">
	
	.__stretch {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}

</style>
